{"version":3,"sources":["components/GoodsForm/GoodsForm.js","components/Good/Good.js","components/GoodsList/GoodsList.js","components/GoodDetails/GoodDetails.js","App.js","reportWebVitals.js","index.js"],"names":["GoodsForm","goods","addGood","useState","goodName","setGoodName","goodNameValid","setgoodNameValid","goodPriority","setGoodPriority","goodStatus","setGoodStatus","className","ClassNames","onSubmit","e","preventDefault","trim","id","length","goodStatusChange","htmlFor","placeholder","value","onChange","target","type","Good","toggleGoodStatus","removeGood","goodSelect","onClick","checked","proppTypes","PropTypes","string","isRequired","number","func","GoodsList","filter","setFilter","filteredGoods","good","sort","a","b","localeCompare","map","GoodDetails","App","setGoods","selectedGoodId","setSelectedGoodId","prevGoods","changeDate","Date","toDateString","toLocaleTimeString","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1b2489f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport ClassNames from \"classnames\";\n\nimport \"./GoodsForm.css\";\n\n\nexport const GoodsForm = ({ goods, addGood }) => {\n  const [goodName, setGoodName] = useState('');\n  const [goodNameValid, setgoodNameValid] = useState(true);\n  const [goodPriority, setGoodPriority] = useState(1);\n  const [goodStatus, setGoodStatus] = useState('Have');\n\n  return (\n    <form \n      className={ClassNames({\n        \"goods-form\": true,\n        \"goods-form--error\": !goodNameValid,\n      })}\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        if (goodName.trim() === '') {\n          setgoodNameValid(false);\n          return;\n        }\n\n        addGood({\n          id: goods.length === 0 \n            ? 1 \n            : goods[goods.length - 1].id + 1,\n          goodName,\n          goodPriority,\n          goodStatus,\n          goodStatusChange: '',\n          \n        });\n\n        setGoodName('');\n        setGoodPriority(1);\n        setGoodStatus('Have');\n      }}\n    >\n      Add your good\n\n      <label htmlFor=\"good-name\">\n        Name:&nbsp;\n\n        <input\n          id=\"good-name\"\n          placeholder=\"Good name\"\n          value={goodName}\n          onChange={(e) => {\n            setgoodNameValid(true);\n            setGoodName(e.target.value)\n          }}\n        />        \n      </label>\n\n      {!goodNameValid \n        && <div className=\"name-error\">\n          Enter valid name, please.\n        </div>\n      }\n\n      <label htmlFor=\"good-priority\">\n        Priority:&nbsp;\n\n        <select\n          id=\"good-priority\"\n          value={goodPriority}\n          onChange={(e) => setGoodPriority(e.target.value)}\n        >\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n        </select>\n      </label>\n\n      <label htmlFor=\"good-status\">\n        Status:&nbsp;\n\n        <select\n          id=\"good-status\"\n          value={goodStatus}\n          onChange={(e) => {\n            setGoodStatus(e.target.value);\n          }}\n        >\n          <option value=\"Have\">Have</option>\n          <option value=\"Run out\">Run out</option>\n        </select>\n      </label>\n\n      <button type=\"submit\">\n        Add a good\n      </button>\n    </form>\n  )\n};\n\nGoodsForm.propTypes = {\n  goods: PropTypes.array.isRequired,\n  addGood: PropTypes.func.isRequired,\n}","import React from \"react\";\nimport ClassNames from 'classnames';\nimport PropTypes from \"prop-types\";\n\nimport \"./Good.css\";\n\nexport const Good = ({ \n  goodName,\n  goodPriority,\n  goodStatus,\n  id,\n  toggleGoodStatus,\n  removeGood,\n  goodSelect\n}) => {\n  return (\n    <li \n      className={ClassNames({\n      'good': true,\n      'good--run-out': goodStatus === 'Run out',\n      })}\n      onClick={(e) => goodSelect(e, id)}\n    >\n      <p>\n        Name:&nbsp;\n        {goodName}\n      </p>\n\n      <p>\n        Priority:&nbsp;\n        {goodPriority}\n      </p>\n\n      <p>\n        <input\n          id=\"good-status\"\n          type=\"checkbox\"\n          checked={goodStatus===\"Have\"}\n          onChange={() => toggleGoodStatus(id)}\n        />\n        \n        Status:&nbsp;\n        {goodStatus}\n      </p>\n\n      <button\n        id=\"good-remove\"\n        type=\"button\"\n        onClick={() => removeGood(id)}\n      >\n        &times;\n      </button>\n    </li>\n  )\n};\n\nGood.proppTypes = {\n  goodName: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  goodPriority: PropTypes.number.isRequired,\n  goodStatus: PropTypes.string.isRequired,\n  toggleGoodStatus: PropTypes.func.isRequired,\n  removeGood: PropTypes.func.isRequired,\n  goodSelect: PropTypes.func.isRequired,\n}","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Good } from \"../Good\";\n\nimport \"./GoodsList.css\";\n\nexport const GoodsList = ({ goods, toggleGoodStatus, removeGood, goodSelect }) => {\n  const [filter, setFilter] = useState('All')\n\n  let filteredGoods = goods.filter(good => filter !== \"All\" \n    ? good.goodStatus === filter \n    : good\n  )\n\n  filteredGoods = [...filteredGoods].sort((a, b) => {\n    if(a.goodPriority - b.goodPriority > 0) {\n      return 1;\n    } else if (a.goodPriority - b.goodPriority === 0) {\n      if (a.goodName.localeCompare(b.goodName) > 0) {\n        return 1;\n      } else if (a.goodName.localeCompare(b.goodName) === 0) {\n        return 0; \n      } else {\n        return -1;\n      }\n    } else {\n      return -1\n    }\n  })\n\n  return (\n    <div className=\"goods-list\">\n      <h2 className=\"goods-list__title\">\n        Grocery List\n      </h2>\n      \n      <select onChange={(e) => setFilter(e.target.value)}>\n        <option value=\"All\">All</option>\n        <option value=\"Have\">Have</option>\n        <option value=\"Run out\">Run out</option>\n      </select>\n\n      <ul className=\"goods-list__list\">\n        {filteredGoods.map(good => (\n          <Good\n            key={good.id}\n            {...good}\n            toggleGoodStatus={toggleGoodStatus}\n            removeGood={removeGood}\n            goodSelect={goodSelect}\n          />\n        ))}\n      </ul>\n    </div>\n  )\n};\n\nGoodsList.propTypes = {\n  goods: PropTypes.array.isRequired,\n  toggleGoodStatus: PropTypes.func.isRequired,\n  removeGood: PropTypes.func.isRequired,\n  goodSelect: PropTypes.func.isRequired,\n};","import React from \"react\";\nimport ClassNames from 'classnames';\nimport PropTypes from \"prop-types\";\n\nimport './GoodDetails.css'\n\nexport const GoodDetails = ({\n  goodName,\n  id,\n  goodPriority,\n  goodStatus,\n  goodStatusChange,\n  toggleGoodStatus,\n  removeGood\n}) => {\n  return (\n    <div \n      className={ClassNames({\n        'good-details': true,\n        'good-details--run-out': goodStatus === 'Run out',\n      })}\n    >\n      <p>\n        Name:&nbsp;\n        {goodName}\n      </p>\n\n      <p>\n        Priority:&nbsp;\n        {goodPriority}\n      </p>\n\n      <p>\n        <input\n          type=\"checkbox\"\n          checked={goodStatus===\"Have\"}\n          onChange={() => toggleGoodStatus(id)}\n        />\n\n        &nbsp;Status:&nbsp;\n        {goodStatus}\n      </p>\n\n      {goodStatusChange \n        && <p>\n          Last change of status:&nbsp;\n          <br/>\n          {goodStatusChange}\n        </p>\n      }\n\n      <button\n        type=\"button\"\n        onClick={() => removeGood(id)}\n      >\n        &times;\n      </button>\n\n    </div>\n  )\n};\n\nGoodDetails.proppTypes = {\n  goodName: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  goodPriority: PropTypes.number.isRequired,\n  goodStatus: PropTypes.string.isRequired,\n  goodStatusChange: PropTypes.func.isRequired,\n  toggleGoodStatus: PropTypes.func.isRequired,\n  removeGood: PropTypes.func.isRequired,\n}","import React, { useState } from \"react\";\nimport { GoodsForm } from './components/GoodsForm';\nimport { GoodsList } from './components/GoodsList';\nimport { GoodDetails } from './components/GoodDetails';\nimport './App.css';\n\nfunction App() {\n  const [goods, setGoods] = useState([]);\n  const [selectedGoodId, setSelectedGoodId] = useState('');\n\n  const addGood = (good) => {\n    setGoods(prevGoods => [...prevGoods, good])\n  }\n\n  const removeGood = (id) => {\n    setGoods(goods.filter(good => good.id !== id));\n    \n    if (id === selectedGoodId) {\n      setSelectedGoodId('');\n    }\n  }\n\n  const goodSelect = ({target},id) => {\n    if(target.id !== 'good-status' && target.id !== 'good-remove') {\n      setSelectedGoodId(id);\n    }\n  }\n\n  const toggleGoodStatus = (id) => {\n    setGoods((prevGoods) => {\n      const goods = prevGoods.map((good) => {\n        if(good.id === id) {\n          const changeDate = new Date().toDateString() + ', ' + new Date().toLocaleTimeString();\n            \n          const changedGood = {\n            ...good,\n            goodStatus: good.goodStatus === \"Have\" ? \"Run out\" : \"Have\",\n            goodStatusChange: changeDate,\n          };\n          \n          return changedGood;\n        }\n\n        return good;\n      })\n\n      return goods;\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <GoodsList\n        goods={goods}\n        toggleGoodStatus={toggleGoodStatus}\n        removeGood={removeGood}\n        goodSelect={goodSelect}\n      />\n      <div>\n        <GoodsForm goods={goods} addGood={addGood}/>\n        {selectedGoodId \n          && goods.find(good => good.id === selectedGoodId)\n          && <GoodDetails \n            {...goods.find(good => good.id === selectedGoodId)}\n            removeGood={removeGood}\n            toggleGoodStatus={toggleGoodStatus}\n          />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}