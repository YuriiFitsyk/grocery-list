{"version":3,"sources":["components/GoodsForm/GoodsForm.js","components/Good/Good.js","components/GoodsList/GoodsList.js","App.js","reportWebVitals.js","index.js"],"names":["GoodsForm","goods","addGood","useState","goodName","setGoodName","goodPriority","setGoodPriority","goodStatus","setGoodStatus","className","onSubmit","e","preventDefault","id","length","goodStatusChange","htmlFor","placeholder","value","onChange","target","type","Good","toggleGoodStatus","removeGood","checked","onClick","GoodsList","filter","setFilter","filteredGoods","good","sort","a","b","localeCompare","map","App","setGoods","prevGoods","changeDate","Date","toDateString","toLocaleTimeString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1a2f502.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./GoodsForm.css\";\n\n\nexport const GoodsForm = ({ goods, addGood }) => {\n  const [goodName, setGoodName] = useState('');\n  const [goodPriority, setGoodPriority] = useState(1);\n  const [goodStatus, setGoodStatus] = useState('Have');\n\n  return (\n    <form \n      className=\"goods-form\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        addGood({\n          id: goods.length === 0 \n            ? 1 \n            : goods[goods.length - 1].id + 1,\n          goodName,\n          goodPriority,\n          goodStatus,\n          goodStatusChange: '',\n          \n        });\n\n        setGoodName('');\n        setGoodPriority(1);\n        setGoodStatus('Have');\n      }}\n    >\n      Add your good\n\n      <label htmlFor=\"good-name\">\n        Name:&nbsp;\n\n        <input\n          id=\"good-name\"\n          placeholder=\"Good name\"\n          value={goodName}\n          onChange={(e) => setGoodName(e.target.value)}\n        />\n      </label>\n\n      <label htmlFor=\"good-priority\">\n        Priority:&nbsp;\n\n        <select\n          id=\"good-priority\"\n          value={goodPriority}\n          onChange={(e) => setGoodPriority(e.target.value)}\n        >\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n        </select>\n      </label>\n\n      <label htmlFor=\"good-status\">\n        Status:&nbsp;\n\n        <select\n          id=\"good-status\"\n          value={goodStatus}\n          onChange={(e) => {\n            setGoodStatus(e.target.value);\n          }}\n        >\n          <option value=\"Have\">Have</option>\n          <option value=\"Run out\">Run out</option>\n        </select>\n      </label>\n\n      <button type=\"submit\">\n        Add a good\n      </button>\n    </form>\n  )\n};\n\nGoodsForm.propTypes = {\n  addGood: PropTypes.func.isRequired,\n}","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Good.css\";\n\nexport const Good = ({ goodName, goodPriority, goodStatus, id , toggleGoodStatus, removeGood}) => {\n  return (\n    <li>\n      <input\n        type=\"checkbox\"\n        checked={goodStatus===\"Have\"}\n        onChange={() => toggleGoodStatus(id)}\n      />\n      <br/>\n      Name:&nbsp; {goodName}\n      <br/>\n      Priority:&nbsp; {goodPriority}\n      <br/>\n      Status:&nbsp; {goodStatus}\n      <br/>\n      <button\n        type=\"button\"\n        onClick={() => removeGood(id)}\n      >\n        &times;\n      </button>\n    </li>\n  )\n};","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Good } from \"../Good\";\n\nimport \"./GoodsList.css\";\n\nexport const GoodsList = ({ goods, toggleGoodStatus, removeGood }) => {\n  const [filter, setFilter] = useState('All')\n\n  let filteredGoods = goods.filter(good => filter !== \"All\" \n    ? good.goodStatus === filter \n    : good\n  )\n\n  filteredGoods = [...filteredGoods].sort((a, b) => {\n    if(a.goodPriority - b.goodPriority > 0) {\n      return 1;\n    } else if (a.goodPriority - b.goodPriority === 0) {\n      if (a.goodName.localeCompare(b.goodName) > 0) {\n        return 1;\n      } else if (a.goodName.localeCompare(b.goodName) === 0) {\n        return 0; \n      } else {\n        return -1;\n      }\n    } else {\n      return -1\n    }\n  })\n\n  return (\n    <div className=\"goods-list\">\n      <h2 className=\"goods-list__title\">\n        Grocery List\n      </h2>\n      \n      <select onChange={(e) => setFilter(e.target.value)}>\n        <option value=\"All\">All</option>\n        <option value=\"Have\">Have</option>\n        <option value=\"Run out\">Run out</option>\n      </select>\n\n      <ul>\n        {filteredGoods.map(good => (\n          <Good\n            {...good}\n            toggleGoodStatus={toggleGoodStatus}\n            removeGood={removeGood}\n          />\n        ))}\n      </ul>\n    </div>\n  )\n};\n\nGoodsList.propTypes = {\n  goods: PropTypes.array.isRequired,\n};","import React, { useState } from \"react\";\nimport { GoodsForm } from './components/GoodsForm';\nimport { GoodsList } from './components/GoodsList';\nimport './App.css';\n\nfunction App() {\n  const [goods, setGoods] = useState([]);\n\n  const addGood = (good) => {\n    setGoods(prevGoods => [...prevGoods, good])\n  }\n\n  const removeGood = (id) => {\n    setGoods(goods.filter(good => good.id !== id));\n  }\n\n  const toggleGoodStatus = (id) => {\n    setGoods((prevGoods) => {\n      const goods = prevGoods.map((good) => {\n        if(good.id === id) {\n          const changeDate = new Date().toDateString() + ', ' + new Date().toLocaleTimeString();\n            \n          const changedGood = {\n            ...good,\n            goodStatus: good.goodStatus === \"Have\" ? \"Run out\" : \"Have\",\n            goodStatusChange: changeDate,\n          };\n          \n          return changedGood;\n        }\n\n        return good;\n      })\n\n      return goods;\n    })\n  }\n\n  // onComplete = (id) => {\n  //   this.setState((state) => {\n  //     const todos = state.todos.map((todo) => {\n  //       if (todo.id === id) {\n  //         const changedTodo = {\n  //           ...todo,\n  //           completed: !todo.completed,\n  //         };\n\n  //         return changedTodo;\n  //       }\n\n  //       return todo;\n  //     });\n\n  //     return {\n  //       todos,\n  //     };\n  //   });\n  // }\n\n  return (\n    <div className=\"App\">\n      <GoodsList\n        goods={goods}\n        toggleGoodStatus={toggleGoodStatus}\n        removeGood={removeGood}\n      />\n\n      <GoodsForm goods={goods} addGood={addGood}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}